#include "matrix.h"

#if CHOICE == 1
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x814c,
				0x4962,
				0x2431,
				0x1298,
				0x18c4,
				0x9426,
				0x4213,
				0x2189,
				0x4c81,
				0x6249,
				0x3124,
				0x9812,
				0xc418,
				0x2694,
				0x1342,
				0x8921
	};
	return m;
}

#elif CHOICE == 2
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x88c2,
				0x4423,
				0x2219,
				0x1184,
				0x288c,
				0x3442,
				0x9221,
				0x4118,
				0xc288,
				0x2344,
				0x1922,
				0x8411,
				0x8c28,
				0x4234,
				0x2192,
				0x1841
	};
	return m;
}

#elif CHOICE == 3
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8846,
				0x4423,
				0x2218,
				0x1194,
				0x6884,
				0x3442,
				0x8221,
				0x4119,
				0x4688,
				0x2344,
				0x1822,
				0x9411,
				0x8468,
				0x4234,
				0x2182,
				0x1941
	};
	return m;
}

#elif CHOICE == 4
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x6888,
				0x1444,
				0x4222,
				0x8111,
				0x8846,
				0x44a1,
				0x22b4,
				0x1128,
				0x8684,
				0x414a,
				0x242b,
				0x1812,
				0x8468,
				0x4a14,
				0x2b42,
				0x1281
	};
	return m;
}

#elif CHOICE == 5
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x881e,
				0x4491,
				0x2248,
				0x112c,
				0xe881,
				0x1449,
				0x8224,
				0xc112,
				0x1e88,
				0x9144,
				0x4822,
				0x2c11,
				0x81e8,
				0x4914,
				0x2482,
				0x12c1
	};
	return m;
}

#elif CHOICE == 6
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8814,
				0x4482,
				0x2249,
				0x1138,
				0x2881,
				0x9448,
				0xc224,
				0x4113,
				0x8288,
				0x4944,
				0x2c22,
				0x1411,
				0x4828,
				0x2494,
				0x92c2,
				0x8141
	};
	return m;
}

#elif CHOICE == 7
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8881,
				0x4449,
				0x2224,
				0x1112,
				0x81e8,
				0x4914,
				0x2482,
				0x12c1,
				0x1e88,
				0x9144,
				0x4822,
				0x2c11,
				0xe818,
				0x1494,
				0x8242,
				0xc121
	};
	return m;
}

#elif CHOICE == 8
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x82ce,
				0x4321,
				0x2918,
				0x148c,
				0x28ec,
				0x3412,
				0x9281,
				0x41c8,
				0xce82,
				0x2143,
				0x1829,
				0x8c14,
				0xec28,
				0x1234,
				0x8192,
				0xc841
	};
	return m;
}

#elif CHOICE == 9
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x84d9,
				0x4a82,
				0x2198,
				0x1624,
				0x489d,
				0xa428,
				0x1289,
				0x6142,
				0xd984,
				0x824a,
				0x9821,
				0x2416,
				0x9d48,
				0x28a4,
				0x8912,
				0x4261
	};
	return m;
}

#elif CHOICE == 10
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8128,
				0x4934,
				0x2492,
				0x1241,
				0x1882,
				0x9443,
				0x4229,
				0x2114,
				0x4181,
				0x6949,
				0x3424,
				0x9212,
				0x1418,
				0x9694,
				0x4342,
				0x2921
	};
	return m;
}

#elif CHOICE == 11
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x188c,
				0x9442,
				0x4221,
				0x2118,
				0x82f8,
				0x4384,
				0x29c2,
				0x14e1,
				0xec28,
				0x1234,
				0x8192,
				0xc841,
				0x8e81,
				0x4149,
				0x2824,
				0x1c12
	};
	return m;
}

#elif CHOICE == 12
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x801040c0,
				0x40906020,
				0x20403010,
				0x10209080,
				0x0801040c,
				0x04090602,
				0x02040301,
				0x01020908,
				0x1080c040,
				0x90402060,
				0x40201030,
				0x20108090,
				0x01080c04,
				0x09040206,
				0x04020103,
				0x02010809,
				0x40c08010,
				0x60204090,
				0x30102040,
				0x90801020,
				0x040c0801,
				0x06020409,
				0x03010204,
				0x09080102,
				0xc0401080,
				0x20609040,
				0x10304020,
				0x80902010,
				0x0c040108,
				0x02060904,
				0x01030402,
				0x08090201
	};
	return m;
}

#elif CHOICE == 13
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x808001e0,
				0x40408110,
				0x20204008,
				0x10102004,
				0x08081082,
				0x04040841,
				0x02020540,
				0x010103c0,
				0xe0808001,
				0x10404081,
				0x08202040,
				0x04101020,
				0x82080810,
				0x41040408,
				0x40020205,
				0xc0010103,
				0x01e08080,
				0x81104040,
				0x40082020,
				0x20041010,
				0x10820808,
				0x08410404,
				0x05400202,
				0x03c00101,
				0x8001e080,
				0x40811040,
				0x20400820,
				0x10200410,
				0x08108208,
				0x04084104,
				0x02054002,
				0x0103c001
	};
	return m;
}

#elif CHOICE == 14
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80804082,
				0x40402041,
				0x20201080,
				0x10100840,
				0x08080420,
				0x04040210,
				0x02020108,
				0x0101a004,
				0x82808040,
				0x41404020,
				0x80202010,
				0x40101008,
				0x20080804,
				0x10040402,
				0x08020201,
				0x040101a0,
				0x40828080,
				0x20414040,
				0x10802020,
				0x08401010,
				0x04200808,
				0x02100404,
				0x01080202,
				0xa0040101,
				0x80408280,
				0x40204140,
				0x20108020,
				0x10084010,
				0x08042008,
				0x04021004,
				0x02010802,
				0x01a00401
	};
	return m;
}

#elif CHOICE == 15
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x10808080,
				0x08404040,
				0x04202020,
				0x01101010,
				0x20080808,
				0x12040404,
				0x80020202,
				0x40010101,
				0x80808410,
				0x40401008,
				0x20204004,
				0x10100201,
				0x08080120,
				0x04040812,
				0x02022280,
				0x01018040,
				0x80108084,
				0x40084010,
				0x20042040,
				0x10011002,
				0x08200801,
				0x04120408,
				0x02800222,
				0x01400180,
				0x80841080,
				0x40100840,
				0x20400420,
				0x10020110,
				0x08012008,
				0x04081204,
				0x02228002,
				0x01804001
	};
	return m;
}

#elif CHOICE == 16
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x808001e0,
				0x40408110,
				0x20204008,
				0x10102084,
				0x08081042,
				0x040409c1,
				0x02020580,
				0x010102c0,
				0xe0808001,
				0x10404081,
				0x08202040,
				0x84101020,
				0x42080810,
				0xc1040409,
				0x80020205,
				0xc0010102,
				0x01e08080,
				0x81104040,
				0x40082020,
				0x20841010,
				0x10420808,
				0x09c10404,
				0x05800202,
				0x02c00101,
				0x8001e080,
				0x40811040,
				0x20400820,
				0x10208410,
				0x08104208,
				0x0409c104,
				0x02058002,
				0x0102c001
	};
	return m;
}

#elif CHOICE == 17
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x808001c0,
				0x40408120,
				0x20204010,
				0x10102008,
				0x08081004,
				0x04040882,
				0x02020581,
				0x01010380,
				0xe0808001,
				0x10404081,
				0x08202040,
				0x04101020,
				0x82080810,
				0x41040408,
				0x40020205,
				0xc0010103,
				0x80e08080,
				0x40104040,
				0x20082020,
				0x10041010,
				0x08820808,
				0x04410404,
				0x02400202,
				0x01c00101,
				0xc080e080,
				0x20401040,
				0x10200820,
				0x08100410,
				0x04088208,
				0x82044104,
				0x81024002,
				0x8001c001
	};
	return m;
}

#elif CHOICE == 18
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80808010,
				0x40404090,
				0x20202040,
				0x10101020,
				0x08080801,
				0x04040409,
				0x02020204,
				0x01010102,
				0x8010e080,
				0x40901040,
				0x20408020,
				0x1020c010,
				0x08010e08,
				0x04090104,
				0x02040802,
				0x01020c01,
				0x10e08080,
				0x90104040,
				0x40802020,
				0x20c01010,
				0x010e0808,
				0x09010404,
				0x04080202,
				0x020c0101,
				0xe0801080,
				0x10409040,
				0x80204020,
				0xc0102010,
				0x0e080108,
				0x01040904,
				0x08020402,
				0x0c010201
	};
	return m;
}

#elif CHOICE == 19
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8020c0e0,
				0x40302010,
				0x20901080,
				0x104080c0,
				0x08020c0e,
				0x04030201,
				0x02090108,
				0x0104080c,
				0x2080e0c0,
				0x30401020,
				0x90208010,
				0x4010c080,
				0x02080e0c,
				0x03040102,
				0x09020801,
				0x04010c08,
				0xc0e08020,
				0x20104030,
				0x10802090,
				0x80c01040,
				0x0c0e0802,
				0x02010403,
				0x01080209,
				0x080c0104,
				0xe0c02080,
				0x10203040,
				0x80109020,
				0xc0804010,
				0x0e0c0208,
				0x01020304,
				0x08010902,
				0x0c080401
	};
	return m;
}

#elif CHOICE == 20
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80404101,
				0x402080a0,
				0x20104050,
				0x10082028,
				0x08041014,
				0x0402080a,
				0x02010405,
				0x01a002a2,
				0x40800141,
				0x2040a080,
				0x10205040,
				0x08102820,
				0x04081410,
				0x02040a08,
				0x01020504,
				0xa001a202,
				0x41018040,
				0x80a04020,
				0x40502010,
				0x20281008,
				0x10140804,
				0x080a0402,
				0x04050201,
				0x02a201a0,
				0x01414080,
				0xa0802040,
				0x50401020,
				0x28200810,
				0x14100408,
				0x0a080204,
				0x05040102,
				0xa202a001
	};
	return m;
}

#elif CHOICE == 21
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80800308,
				0x40408001,
				0x20a00244,
				0x10d02102,
				0x08045080,
				0x04089021,
				0x02010410,
				0x01020840,
				0x08808003,
				0x01404080,
				0x4420a002,
				0x0210d021,
				0x80080450,
				0x21040890,
				0x10020104,
				0x40010208,
				0x03088080,
				0x80014040,
				0x024420a0,
				0x210210d0,
				0x50800804,
				0x90210408,
				0x04100201,
				0x08400102,
				0x80030880,
				0x40800140,
				0xa0024420,
				0xd0210210,
				0x04508008,
				0x08902104,
				0x01041002,
				0x02084001
	};
	return m;
}

#elif CHOICE == 22
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80018082,
				0x40804041,
				0x204120a2,
				0x10201051,
				0x08100828,
				0x04090416,
				0x02050209,
				0x01020104,
				0x01808280,
				0x80404140,
				0x4120a220,
				0x20105110,
				0x10082808,
				0x09041604,
				0x05020902,
				0x02010401,
				0xa0208001,
				0x50104080,
				0x08282041,
				0x84941020,
				0xc2ca0810,
				0x41450409,
				0x80820205,
				0x40410102,
				0x20a00180,
				0x10508040,
				0x28084120,
				0x94842010,
				0xcac21008,
				0x45410904,
				0x82800502,
				0x41400201
	};
	return m;
}

#elif CHOICE == 23
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x108080c0,
				0x90404020,
				0x40202010,
				0x20101080,
				0x0108080c,
				0x09040402,
				0x04020201,
				0x02010108,
				0x8020f080,
				0x40308040,
				0x2090c020,
				0x1040e010,
				0x08020f08,
				0x04030804,
				0x02090c02,
				0x01040e01,
				0xe0c02080,
				0x10203040,
				0x80109020,
				0xc0804010,
				0x0e0c0208,
				0x01020304,
				0x08010902,
				0x0c080401,
				0x80e08010,
				0x40104090,
				0x20802040,
				0x10c01020,
				0x080e0801,
				0x04010409,
				0x02080204,
				0x010c0102
	};
	return m;
}

#elif CHOICE == 24
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8134c6e5,
				0x49a6251f,
				0x24d31a87,
				0x12698dcb,
				0x18436c5e,
				0x946a52f1,
				0x423da178,
				0x2196d8bc,
				0x3481e5c6,
				0xa6491f25,
				0xd324871a,
				0x6912cb8d,
				0x43185e6c,
				0x6a94f152,
				0x3d4278a1,
				0x9621bcd8,
				0xc6e58134,
				0x251f49a6,
				0x1a8724d3,
				0x8dcb1269,
				0x6c5e1843,
				0x52f1946a,
				0xa178423d,
				0xd8bc2196,
				0xe5c63481,
				0x1f25a649,
				0x871ad324,
				0xcb8d6912,
				0x5e6c4318,
				0xf1526a94,
				0x78a13d42,
				0xbcd89621
	};
	return m;
}

#elif CHOICE == 25
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x18983cda,
				0x94d4a2b7,
				0x4262d15b,
				0x213168a5,
				0x418983cd,
				0x694d4a2b,
				0x34262d15,
				0x9213168a,
				0x6418983c,
				0x5694d4a2,
				0xa34262d1,
				0xd9213168,
				0xc6418983,
				0x25694d4a,
				0x1a34262d,
				0x8d921316,
				0xcc641898,
				0x225694d4,
				0x11a34262,
				0x88d92131,
				0xacc64189,
				0x7225694d,
				0xb11a3426,
				0x588d9213,
				0x6acc6418,
				0x57225694,
				0xab11a342,
				0xd588d921,
				0x46acc641,
				0x65722569,
				0x3ab11a34,
				0x9d588d92
	};
	return m;
}

#elif CHOICE == 26
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x1926a54f,
				0x9d357f68,
				0x469ab73c,
				0x234d5b9e,
				0x91625af4,
				0xd953f786,
				0x64a97bc3,
				0x32d4b5e9,
				0x26194fa5,
				0x359d687f,
				0x9a463cb7,
				0x4d239e5b,
				0x6291f45a,
				0x53d986f7,
				0xa964c37b,
				0xd432e9b5,
				0xa54f1926,
				0x7f689d35,
				0xb73c469a,
				0x5b9e234d,
				0x5af49162,
				0xf786d953,
				0x7bc364a9,
				0xb5e932d4,
				0x4fa52619,
				0x687f359d,
				0x3cb79a46,
				0x9e5b4d23,
				0xf45a6291,
				0x86f753d9,
				0xc37ba964,
				0xe9b5d432
	};
	return m;
}

#elif CHOICE == 27
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8001810603e0c0f0,
				0x4081c10502102008,
				0x2040600281081004,
				0x1020308140040882,
				0x0810184020820441,
				0x04080c20104182a0,
				0x020507160b408120,
				0x0103020d06c080e0,
				0x01800681e003f0c0,
				0x814005c110020820,
				0x4020026008810410,
				0x2010813004408208,
				0x1008401882204104,
				0x0804200c4110a082,
				0x05021607400b2081,
				0x03010d02c006e080,
				0x81068001c0f003e0,
				0xc105408120080210,
				0x6002204010048108,
				0x3081102008824004,
				0x1840081004412082,
				0x0c20040882a01041,
				0x0716020581200b40,
				0x020d010380e006c0,
				0x06810180f0c0e003,
				0x05c1814008201002,
				0x0260402004100881,
				0x8130201082080440,
				0x4018100841048220,
				0x200c0804a0824110,
				0x160705022081400b,
				0x0d020301e080c006,
				0x03e0c0f080018106,
				0x021020084081c105,
				0x8108100420406002,
				0x4004088210203081,
				0x2082044108101840,
				0x104182a004080c20,
				0x0b40812002050716,
				0x06c080e00103020d,
				0xe003f0c001800681,
				0x10020820814005c1,
				0x0881041040200260,
				0x0440820820108130,
				0x8220410410084018,
				0x4110a0820804200c,
				0x400b208105021607,
				0xc006e08003010d02,
				0xc0f003e081068001,
				0x20080210c1054081,
				0x1004810860022040,
				0x0882400430811020,
				0x0441208218400810,
				0x82a010410c200408,
				0x81200b4007160205,
				0x80e006c0020d0103,
				0xf0c0e00306810180,
				0x0820100205c18140,
				0x0410088102604020,
				0x8208044081302010,
				0x4104822040181008,
				0xa0824110200c0804,
				0x2081400b16070502,
				0xe080c0060d020301
	};
	return m;
}

#elif CHOICE == 28
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x808001c0064080f0,
				0x4040812005604008,
				0x2020401002302004,
				0x1010200881181082,
				0x08081004400c0841,
				0x04040882208604a0,
				0x0202058116830220,
				0x010103800d8101e0,
				0xf0808001c0064080,
				0x0840408120056040,
				0x0420204010023020,
				0x8210102008811810,
				0x4108081004400c08,
				0xa004040882208604,
				0x2002020581168302,
				0xe0010103800d8101,
				0x80f0808001c00640,
				0x4008404081200560,
				0x2004202040100230,
				0x1082101020088118,
				0x084108081004400c,
				0x04a0040408822086,
				0x0220020205811683,
				0x01e0010103800d81,
				0x4080f0808001c006,
				0x6040084040812005,
				0x3020042020401002,
				0x1810821010200881,
				0x0c08410808100440,
				0x8604a00404088220,
				0x8302200202058116,
				0x8101e0010103800d,
				0x064080f0808001c0,
				0x0560400840408120,
				0x0230200420204010,
				0x8118108210102008,
				0x400c084108081004,
				0x208604a004040882,
				0x1683022002020581,
				0x0d8101e001010380,
				0xc0064080f0808001,
				0x2005604008404081,
				0x1002302004202040,
				0x0881181082101020,
				0x04400c0841080810,
				0x82208604a0040408,
				0x8116830220020205,
				0x800d8101e0010103,
				0x01c0064080f08080,
				0x8120056040084040,
				0x4010023020042020,
				0x2008811810821010,
				0x1004400c08410808,
				0x0882208604a00404,
				0x0581168302200202,
				0x03800d8101e00101,
				0x8001c0064080f080,
				0x4081200560400840,
				0x2040100230200420,
				0x1020088118108210,
				0x081004400c084108,
				0x040882208604a004,
				0x0205811683022002,
				0x0103800d8101e001
	};
	return m;
}

#elif CHOICE == 29
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8080400140050b50,
				0x4040a080a00205a8,
				0x2020104110040984,
				0x10100820088204c2,
				0x08088410844182e1,
				0x0404820982254a20,
				0x0202010501172e40,
				0x01018002800b17a0,
				0x508080400140050b,
				0xa84040a080a00205,
				0x8420201041100409,
				0xc210100820088204,
				0xe108088410844182,
				0x200404820982254a,
				0x400202010501172e,
				0xa001018002800b17,
				0x0b50808040014005,
				0x05a84040a080a002,
				0x0984202010411004,
				0x04c2101008200882,
				0x82e1080884108441,
				0x4a20040482098225,
				0x2e40020201050117,
				0x17a001018002800b,
				0x050b508080400140,
				0x0205a84040a080a0,
				0x0409842020104110,
				0x8204c21010082008,
				0x4182e10808841084,
				0x254a200404820982,
				0x172e400202010501,
				0x0b17a00101800280,
				0x40050b5080804001,
				0xa00205a84040a080,
				0x1004098420201041,
				0x088204c210100820,
				0x844182e108088410,
				0x82254a2004048209,
				0x01172e4002020105,
				0x800b17a001018002,
				0x0140050b50808040,
				0x80a00205a84040a0,
				0x4110040984202010,
				0x20088204c2101008,
				0x10844182e1080884,
				0x0982254a20040482,
				0x0501172e40020201,
				0x02800b17a0010180,
				0x400140050b508080,
				0xa080a00205a84040,
				0x1041100409842020,
				0x0820088204c21010,
				0x8410844182e10808,
				0x820982254a200404,
				0x010501172e400202,
				0x8002800b17a00101,
				0x80400140050b5080,
				0x40a080a00205a840,
				0x2010411004098420,
				0x100820088204c210,
				0x088410844182e108,
				0x04820982254a2004,
				0x02010501172e4002,
				0x018002800b17a001
	};
	return m;
}

#elif CHOICE == 30
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x808001e080e0f081,
				0x40408110401008c1,
				0x2020400820080460,
				0x1010200410048230,
				0x0808108208824118,
				0x040408410441a00c,
				0x0202054002402007,
				0x010103c001c0e002,
				0x02808001e080e0f0,
				0x8340408110401008,
				0xc120204008200804,
				0x6010102004100482,
				0x3008081082088241,
				0x18040408410441a0,
				0x0e02020540024020,
				0x05010103c001c0e0,
				0xe002808001e080e0,
				0x1083404081104010,
				0x08c1202040082008,
				0x0460101020041004,
				0x8230080810820882,
				0x4118040408410441,
				0x400e020205400240,
				0xc005010103c001c0,
				0xc0e002808001e080,
				0x2010834040811040,
				0x1008c12020400820,
				0x0804601010200410,
				0x0482300808108208,
				0x8241180404084104,
				0x81400e0202054002,
				0x80c005010103c001,
				0x01c0e002808001e0,
				0x8120108340408110,
				0x401008c120204008,
				0x2008046010102004,
				0x1004823008081082,
				0x0882411804040841,
				0x0581400e02020540,
				0x0380c005010103c0,
				0xc001c0e002808001,
				0x2081201083404081,
				0x10401008c1202040,
				0x0820080460101020,
				0x0410048230080810,
				0x8208824118040408,
				0x810581400e020205,
				0x800380c005010103,
				0x03c001c0e0028080,
				0x0220812010834040,
				0x8110401008c12020,
				0x4008200804601010,
				0x2004100482300808,
				0x1082088241180404,
				0x0b810581400e0202,
				0x06800380c0050101,
				0x0103c001c0e00280,
				0x8102208120108340,
				0x408110401008c120,
				0x2040082008046010,
				0x1020041004823008,
				0x0810820882411804,
				0x050b810581400e02,
				0x0306800380c00501
	};
	return m;
}

#elif CHOICE == 31
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x800181e0032083c0,
				0x4081c11002304220,
				0x204060088118a110,
				0x10203004400c5008,
				0x0810188220862804,
				0x04080c4110c31482,
				0x020507400bc10981,
				0x010302c006400780,
				0x0180e0812003c083,
				0x814010c130022042,
				0x40200860188110a1,
				0x201004300c400850,
				0x1008821886200428,
				0x0804410cc3108214,
				0x05024007c10b8109,
				0x0301c00240068007,
				0x81e0800183c00320,
				0xc110408142200230,
				0x60082040a1108118,
				0x300410205008400c,
				0x1882081028042086,
				0x0c410408148210c3,
				0x0740020509810bc1,
				0x02c0010307800640,
				0xe0810180c0832003,
				0x10c1814020423002,
				0x0860402010a11881,
				0x0430201008500c40,
				0x8218100804288620,
				0x410c08048214c310,
				0x400705028109c10b,
				0xc002030180074006,
				0x032083c0800181e0,
				0x023042204081c110,
				0x8118a11020406008,
				0x400c500810203004,
				0x2086280408101882,
				0x10c3148204080c41,
				0x0bc1098102050740,
				0x06400780010302c0,
				0x2003c0830180e081,
				0x30022042814010c1,
				0x188110a140200860,
				0x0c40085020100430,
				0x8620042810088218,
				0xc31082140804410c,
				0xc10b810905024007,
				0x400680070301c002,
				0x83c0032081e08001,
				0x42200230c1104081,
				0xa110811860082040,
				0x5008400c30041020,
				0x2804208618820810,
				0x148210c30c410408,
				0x09810bc107400205,
				0x0780064002c00103,
				0xc0832003e0810180,
				0x2042300210c18140,
				0x10a1188108604020,
				0x08500c4004302010,
				0x0428862082181008,
				0x8214c310410c0804,
				0x8109c10b40070502,
				0x80074006c0020301
	};
	return m;
}

#elif CHOICE == 32
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x800103e02abcc0f0,
				0x40810210bfe22008,
				0x204081085f711004,
				0x10204004afb80882,
				0x0810208257dc0441,
				0x04081041ab6e82a0,
				0x02050b40ff8b8120,
				0x010306c0557980e0,
				0x0180e003bc2af0c0,
				0x81401002e2bf0820,
				0x40200881715f0410,
				0x20100440b8af8208,
				0x10088220dc574104,
				0x080441106eaba082,
				0x0502400b8bff2081,
				0x0301c0067955e080,
				0x03e08001c0f02abc,
				0x021040812008bfe2,
				0x8108204010045f71,
				0x400410200882afb8,
				0x20820810044157dc,
				0x1041040882a0ab6e,
				0x0b4002058120ff8b,
				0x06c0010380e05579,
				0xe0030180f0c0bc2a,
				0x100281400820e2bf,
				0x088140200410715f,
				0x044020108208b8af,
				0x822010084104dc57,
				0x41100804a0826eab,
				0x400b050220818bff,
				0xc0060301e0807955,
				0x2abcc0f0800103e0,
				0xbfe2200840810210,
				0x5f71100420408108,
				0xafb8088210204004,
				0x57dc044108102082,
				0xab6e82a004081041,
				0xff8b812002050b40,
				0x557980e0010306c0,
				0xbc2af0c00180e003,
				0xe2bf082081401002,
				0x715f041040200881,
				0xb8af820820100440,
				0xdc57410410088220,
				0x6eaba08208044110,
				0x8bff20810502400b,
				0x7955e0800301c006,
				0xc0f02abc03e08001,
				0x2008bfe202104081,
				0x10045f7181082040,
				0x0882afb840041020,
				0x044157dc20820810,
				0x82a0ab6e10410408,
				0x8120ff8b0b400205,
				0x80e0557906c00103,
				0xf0c0bc2ae0030180,
				0x0820e2bf10028140,
				0x0410715f08814020,
				0x8208b8af04402010,
				0x4104dc5782201008,
				0xa0826eab41100804,
				0x20818bff400b0502,
				0xe0807955c0060301
	};
	return m;
}

#elif CHOICE == 33
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x01818080,
				0x81c14040,
				0x40602020,
				0x21311010,
				0x11190808,
				0x080c0404,
				0x04060202,
				0x02030101,
				0x80018180,
				0x4081c140,
				0x20406020,
				0x10213110,
				0x08111908,
				0x04080c04,
				0x02040602,
				0x01020301,
				0x80800181,
				0x404081c1,
				0x20204060,
				0x10102131,
				0x08081119,
				0x0404080c,
				0x02020406,
				0x01010203,
				0x81808001,
				0xc1404081,
				0x60202040,
				0x31101021,
				0x19080811,
				0x0c040408,
				0x06020204,
				0x03010102
	};
	return m;
}

#elif CHOICE == 34
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80010203,
				0x40810382,
				0x204081c1,
				0x10214263,
				0x08112332,
				0x04081119,
				0x0204080c,
				0x01020406,
				0x01800302,
				0x81408203,
				0x4020c181,
				0x21106342,
				0x11083223,
				0x08041911,
				0x04020c08,
				0x02010604,
				0x02038001,
				0x03824081,
				0x81c12040,
				0x42631021,
				0x23320811,
				0x11190408,
				0x080c0204,
				0x04060102,
				0x03020180,
				0x82038140,
				0xc1814020,
				0x63422110,
				0x32231108,
				0x19110804,
				0x0c080402,
				0x06040201
	};
	return m;
}

#elif CHOICE == 35
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80010203,
				0x40800181,
				0x204182c3,
				0x10214362,
				0x08112332,
				0x04081119,
				0x0204080c,
				0x01020406,
				0x01800302,
				0x80408101,
				0x4120c382,
				0x21106243,
				0x11083223,
				0x08041911,
				0x04020c08,
				0x02010604,
				0x02038001,
				0x01814080,
				0x82c32041,
				0x43621021,
				0x23320811,
				0x11190408,
				0x080c0204,
				0x04060102,
				0x03020180,
				0x81018040,
				0xc3824120,
				0x62432110,
				0x32231108,
				0x19110804,
				0x0c080402,
				0x06040201
	};
	return m;
}

#elif CHOICE == 36
vector<ROW> get_matrix()
{
	vector<ROW> m{
					0x80040105,
				0x40028082,
				0x20054144,
				0x108621a7,
				0x08471156,
				0x0423082b,
				0x02110415,
				0x0108020a,
				0x04800501,
				0x02408280,
				0x05204441,
				0x8610a721,
				0x47085611,
				0x23042b08,
				0x11021504,
				0x08010a02,
				0x01058004,
				0x80824002,
				0x41442005,
				0x21a71086,
				0x11560847,
				0x082b0423,
				0x04150211,
				0x020a0108,
				0x05010480,
				0x82800240,
				0x44410520,
				0xa7218610,
				0x56114708,
				0x2b082304,
				0x15041102,
				0x0a020801
	};
	return m;
}

#elif CHOICE == 37
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80808001,
				0x40404081,
				0x20202040,
				0x10101021,
				0x08080811,
				0x04040408,
				0x02020204,
				0x01010102,
				0x807b0180,
				0x40c68140,
				0x20e34020,
				0x108a2110,
				0x08be1108,
				0x04df0804,
				0x02ef0402,
				0x01f70201,
				0x7b018080,
				0xc6814040,
				0xe3402020,
				0x8a211010,
				0xbe110808,
				0xdf080404,
				0xef040202,
				0xf7020101,
				0x01807b80,
				0x8140c640,
				0x4020e320,
				0x21108a10,
				0x1108be08,
				0x0804df04,
				0x0402ef02,
				0x0201f701
	};
	return m;
}

#elif CHOICE == 38
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x80e0a0a0,
				0x40f0d0d0,
				0x20f86868,
				0x109c9494,
				0x084ecaca,
				0x04c74545,
				0x02838282,
				0x01c14141,
				0xa0e0e080,
				0xd0f0f040,
				0x68f8f820,
				0x949c9c10,
				0xca4e4e08,
				0x45c7c704,
				0x82838302,
				0x41c1c101,
				0xe0a080e0,
				0xf0d040f0,
				0xf86820f8,
				0x9c94109c,
				0x4eca084e,
				0xc74504c7,
				0x83820283,
				0xc14101c1,
				0xe080e0a0,
				0xf040f0d0,
				0xf820f868,
				0x9c109c94,
				0x4e084eca,
				0xc704c745,
				0x83028382,
				0xc101c141
	};
	return m;
}

#elif CHOICE == 39
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8080808080808081,
				0x40404040404040c1,
				0x2020202020202060,
				0x1010101010101031,
				0x0808080808080819,
				0x040404040404040c,
				0x0202020202020206,
				0x0101010101010103,
				0x80814701027a3d80,
				0x40c1e4810347a340,
				0x2060724081a3d120,
				0x10317e2142abd510,
				0x0819781123afd708,
				0x040c3c0811d7eb04,
				0x02061e0408ebf502,
				0x01038f0204f57a01,
				0x814701027a3d8080,
				0xc1e4810347a34040,
				0x60724081a3d12020,
				0x317e2142abd51010,
				0x19781123afd70808,
				0x0c3c0811d7eb0404,
				0x061e0408ebf50202,
				0x038f0204f57a0101,
				0x4701027a3d808180,
				0xe4810347a340c140,
				0x724081a3d1206020,
				0x7e2142abd5103110,
				0x781123afd7081908,
				0x3c0811d7eb040c04,
				0x1e0408ebf5020602,
				0x8f0204f57a010301,
				0x01027a3d80814780,
				0x810347a340c1e440,
				0x4081a3d120607220,
				0x2142abd510317e10,
				0x1123afd708197808,
				0x0811d7eb040c3c04,
				0x0408ebf502061e02,
				0x0204f57a01038f01,
				0x027a3d8081470180,
				0x0347a340c1e48140,
				0x81a3d12060724020,
				0x42abd510317e2110,
				0x23afd70819781108,
				0x11d7eb040c3c0804,
				0x08ebf502061e0402,
				0x04f57a01038f0201,
				0x7a3d808147010280,
				0x47a340c1e4810340,
				0xa3d1206072408120,
				0xabd510317e214210,
				0xafd7081978112308,
				0xd7eb040c3c081104,
				0xebf502061e040802,
				0xf57a01038f020401,
				0x3d80814701027a80,
				0xa340c1e481034740,
				0xd12060724081a320,
				0xd510317e2142ab10,
				0xd70819781123af08,
				0xeb040c3c0811d704,
				0xf502061e0408eb02,
				0x7a01038f0204f501

	};
	return m;
}

#elif CHOICE == 40
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0101810282818283,
				0x8181c10343c143c2,
				0x40406081a160a1e1,
				0x2121314252315273,
				0x111119232b192b3a,
				0x08080c11150c151d,
				0x040406080a060a0e,
				0x0202030405030507,
				0x8301018102828182,
				0xc28181c10343c143,
				0xe140406081a160a1,
				0x7321213142523152,
				0x3a111119232b192b,
				0x1d08080c11150c15,
				0x0e040406080a060a,
				0x0702020304050305,
				0x8283010181028281,
				0x43c28181c10343c1,
				0xa1e140406081a160,
				0x5273212131425231,
				0x2b3a111119232b19,
				0x151d08080c11150c,
				0x0a0e040406080a06,
				0x0507020203040503,
				0x8182830101810282,
				0xc143c28181c10343,
				0x60a1e140406081a1,
				0x3152732121314252,
				0x192b3a111119232b,
				0x0c151d08080c1115,
				0x060a0e040406080a,
				0x0305070202030405,
				0x8281828301018102,
				0x43c143c28181c103,
				0xa160a1e140406081,
				0x5231527321213142,
				0x2b192b3a11111923,
				0x150c151d08080c11,
				0x0a060a0e04040608,
				0x0503050702020304,
				0x0282818283010181,
				0x0343c143c28181c1,
				0x81a160a1e1404060,
				0x4252315273212131,
				0x232b192b3a111119,
				0x11150c151d08080c,
				0x080a060a0e040406,
				0x0405030507020203,
				0x8102828182830101,
				0xc10343c143c28181,
				0x6081a160a1e14040,
				0x3142523152732121,
				0x19232b192b3a1111,
				0x0c11150c151d0808,
				0x06080a060a0e0404,
				0x0304050305070202,
				0x0181028281828301,
				0x81c10343c143c281,
				0x406081a160a1e140,
				0x2131425231527321,
				0x1119232b192b3a11,
				0x080c11150c151d08,
				0x0406080a060a0e04,
				0x0203040503050702
	};
	return m;
}

#elif CHOICE == 41
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8081028203048583,
				0x40c001418102c2c1,
				0x206182a2c30564e3,
				0x103143536286b772,
				0x0819232b32475e3a,
				0x040c111519232f1d,
				0x0206080a0c11170e,
				0x0103040506080b07,
				0x8180820204038385,
				0xc04041010281c1c2,
				0x6120a28205c3e364,
				0x31105343866272b7,
				0x19082b2347323a5e,
				0x0c04151123191d2f,
				0x06020a08110c0e17,
				0x030105040806070b,
				0x0282808185830304,
				0x014140c0c2c18102,
				0x82a2206164e3c305,
				0x43531031b7726286,
				0x232b08195e3a3247,
				0x1115040c2f1d1923,
				0x080a0206170e0c11,
				0x040501030b070608,
				0x8202818083850403,
				0x4101c040c1c20281,
				0xa2826120e36405c3,
				0x5343311072b78662,
				0x2b2319083a5e4732,
				0x15110c041d2f2319,
				0x0a0806020e17110c,
				0x05040301070b0806,
				0x0304858380810282,
				0x8102c2c140c00141,
				0xc30564e3206182a2,
				0x6286b77210314353,
				0x32475e3a0819232b,
				0x19232f1d040c1115,
				0x0c11170e0206080a,
				0x06080b0701030405,
				0x0403838581808202,
				0x0281c1c2c0404101,
				0x05c3e3646120a282,
				0x866272b731105343,
				0x47323a5e19082b23,
				0x23191d2f0c041511,
				0x110c0e1706020a08,
				0x0806070b03010504,
				0x8583030402828081,
				0xc2c18102014140c0,
				0x64e3c30582a22061,
				0xb772628643531031,
				0x5e3a3247232b0819,
				0x2f1d19231115040c,
				0x170e0c11080a0206,
				0x0b07060804050103,
				0x8385040382028180,
				0xc1c202814101c040,
				0xe36405c3a2826120,
				0x72b7866253433110,
				0x3a5e47322b231908,
				0x1d2f231915110c04,
				0x0e17110c0a080602,
				0x070b080605040301
	};
	return m;
}

#elif CHOICE == 42
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8080028004820184,
				0x4040014002418042,
				0x2020822005a24125,
				0x1010431086532196,
				0x08082308472b114f,
				0x0404110423150827,
				0x02020802110a0413,
				0x0101040108050209,
				0x8480800280048201,
				0x4240400140024180,
				0x252020822005a241,
				0x9610104310865321,
				0x4f08082308472b11,
				0x2704041104231508,
				0x1302020802110a04,
				0x0901010401080502,
				0x0184808002800482,
				0x8042404001400241,
				0x41252020822005a2,
				0x2196101043108653,
				0x114f08082308472b,
				0x0827040411042315,
				0x041302020802110a,
				0x0209010104010805,
				0x8201848080028004,
				0x4180424040014002,
				0xa241252020822005,
				0x5321961010431086,
				0x2b114f0808230847,
				0x1508270404110423,
				0x0a04130202080211,
				0x0502090101040108,
				0x0482018480800280,
				0x0241804240400140,
				0x05a2412520208220,
				0x8653219610104310,
				0x472b114f08082308,
				0x2315082704041104,
				0x110a041302020802,
				0x0805020901010401,
				0x8004820184808002,
				0x4002418042404001,
				0x2005a24125202082,
				0x1086532196101043,
				0x08472b114f080823,
				0x0423150827040411,
				0x02110a0413020208,
				0x0108050209010104,
				0x0280048201848080,
				0x0140024180424040,
				0x822005a241252020,
				0x4310865321961010,
				0x2308472b114f0808,
				0x1104231508270404,
				0x0802110a04130202,
				0x0401080502090101,
				0x8002800482018480,
				0x4001400241804240,
				0x20822005a2412520,
				0x1043108653219610,
				0x082308472b114f08,
				0x0411042315082704,
				0x020802110a041302,
				0x0104010805020901
	};
	return m;
}

#elif CHOICE == 43
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x82ce,
				0x4321,
				0x2918,
				0x148c,
				0x28ec,
				0x3412,
				0x9281,
				0x41c8,
				0xce82,
				0x2143,
				0x1829,
				0x8c14,
				0xec28,
				0x1234,
				0x8192,
				0xc841
	};
	return m;
}

#elif CHOICE == 44
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x1988,
				0x9d44,
				0x4622,
				0x2311,
				0x8198,
				0x49d4,
				0x2462,
				0x1231,
				0x8819,
				0x449d,
				0x2246,
				0x1123,
				0x9881,
				0xd449,
				0x6224,
				0x3112
	};
	return m;
}

#elif CHOICE == 45
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0xa2531e49,
				0x73fa916d,
				0xb97d4836,
				0x54b62c93,
				0x2a35e194,
				0x37af19d6,
				0x9bd78463,
				0x456bc239,
				0x53a2491e,
				0xfa736d91,
				0x7db93648,
				0xb654932c,
				0x352a94e1,
				0xaf37d619,
				0xd79b6384,
				0x6b4539c2,
				0x1e49a253,
				0x916d73fa,
				0x4836b97d,
				0x2c9354b6,
				0xe1942a35,
				0x19d637af,
				0x84639bd7,
				0xc239456b,
				0x491e53a2,
				0x6d91fa73,
				0x36487db9,
				0x932cb654,
				0x94e1352a,
				0xd619af37,
				0x6384d79b,
				0x39c26b45
	};
	return m;
}


#elif CHOICE == 46
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0xa72b89f4,
				0x7c3e4d86,
				0xbe9f26c3,
				0x5f4713e9,
				0x7ab2984f,
				0xc7e3d468,
				0xebf9623c,
				0xf574319e,
				0x2ba7f489,
				0x3e7c864d,
				0x9fbec326,
				0x475fe913,
				0xb27a4f98,
				0xe3c768d4,
				0xf9eb3c62,
				0x74f59e31,
				0x89f4a72b,
				0x4d867c3e,
				0x26c3be9f,
				0x13e95f47,
				0x984f7ab2,
				0xd468c7e3,
				0x623cebf9,
				0x319ef574,
				0xf4892ba7,
				0x864d3e7c,
				0xc3269fbe,
				0xe913475f,
				0x4f98b27a,
				0x68d4e3c7,
				0x3c62f9eb,
				0x9e3174f5
	};
	return m;
}

#elif CHOICE == 47
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x00010810,
				0x00800408,
				0x00400204,
				0x00200102,
				0x00108001,
				0x00084080,
				0x00042040,
				0x00021020,
				0x10000108,
				0x08008004,
				0x04004002,
				0x02002001,
				0x01001080,
				0x80000840,
				0x40000420,
				0x20000210,
				0x08100001,
				0x04080080,
				0x02040040,
				0x01020020,
				0x80010010,
				0x40800008,
				0x20400004,
				0x10200002,
				0x01081000,
				0x80040800,
				0x40020400,
				0x20010200,
				0x10800100,
				0x08408000,
				0x04204000,
				0x02102000
	};
	return m;
}

#elif CHOICE == 48
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x00000080800080008080000000808000,
				0x00000040400040004040000000404000,
				0x00000020200020002020000000202000,
				0x00000010100010001010000000101000,
				0x00000008080008000808000000080800,
				0x00000004040004000404000000040400,
				0x00000002020002000202000000020200,
				0x00000001010001000101000000010100,
				0x00008000008000808080000080000080,
				0x00004000004000404040000040000040,
				0x00002000002000202020000020000020,
				0x00001000001000101010000010000010,
				0x00000800000800080808000008000008,
				0x00000400000400040404000004000004,
				0x00000200000200020202000002000002,
				0x00000100000100010101000001000001,
				0x00800000800080000000808080000080,
				0x00400000400040000000404040000040,
				0x00200000200020000000202020000020,
				0x00100000100010000000101010000010,
				0x00080000080008000000080808000008,
				0x00040000040004000000040404000004,
				0x00020000020002000000020202000002,
				0x00010000010001000000010101000001,
				0x80000000008000800000808000808000,
				0x40000000004000400000404000404000,
				0x20000000002000200000202000202000,
				0x10000000001000100000101000101000,
				0x08000000000800080000080800080800,
				0x04000000000400040000040400040400,
				0x02000000000200020000020200020200,
				0x01000000000100010000010100010100,
				0x80008000008000008000008000008080,
				0x40004000004000004000004000004040,
				0x20002000002000002000002000002020,
				0x10001000001000001000001000001010,
				0x08000800000800000800000800000808,
				0x04000400000400000400000400000404,
				0x02000200000200000200000200000202,
				0x01000100000100000100000100000101,
				0x00800080800000000080800000008080,
				0x00400040400000000040400000004040,
				0x00200020200000000020200000002020,
				0x00100010100000000010100000001010,
				0x00080008080000000008080000000808,
				0x00040004040000000004040000000404,
				0x00020002020000000002020000000202,
				0x00010001010000000001010000000101,
				0x80008000000000800080800080800000,
				0x40004000000000400040400040400000,
				0x20002000000000200020200020200000,
				0x10001000000000100010100010100000,
				0x08000800000000080008080008080000,
				0x04000400000000040004040004040000,
				0x02000200000000020002020002020000,
				0x01000100000000010001010001010000,
				0x00800080000080008000008080800000,
				0x00400040000040004000004040400000,
				0x00200020000020002000002020200000,
				0x00100010000010001000001010100000,
				0x00080008000008000800000808080000,
				0x00040004000004000400000404040000,
				0x00020002000002000200000202020000,
				0x00010001000001000100000101010000,
				0x80800000800000800000800000800080,
				0x40400000400000400000400000400040,
				0x20200000200000200000200000200020,
				0x10100000100000100000100000100010,
				0x08080000080000080000080000080008,
				0x04040000040000040000040000040004,
				0x02020000020000020000020000020002,
				0x01010000010000010000010000010001,
				0x80800000008080000000008080008000,
				0x40400000004040000000004040004000,
				0x20200000002020000000002020002000,
				0x10100000001010000000001010001000,
				0x08080000000808000000000808000800,
				0x04040000000404000000000404000400,
				0x02020000000202000000000202000200,
				0x01010000000101000000000101000100,
				0x00008080008080008000000000800080,
				0x00004040004040004000000000400040,
				0x00002020002020002000000000200020,
				0x00001010001010001000000000100010,
				0x00000808000808000800000000080008,
				0x00000404000404000400000000040004,
				0x00000202000202000200000000020002,
				0x00000101000101000100000000010001,
				0x00008080800000800080000080008000,
				0x00004040400000400040000040004000,
				0x00002020200000200020000020002000,
				0x00001010100000100010000010001000,
				0x00000808080000080008000008000800,
				0x00000404040000040004000004000400,
				0x00000202020000020002000002000200,
				0x00000101010000010001000001000100,
				0x00808000000080800080008080000000,
				0x00404000000040400040004040000000,
				0x00202000000020200020002020000000,
				0x00101000000010100010001010000000,
				0x00080800000008080008000808000000,
				0x00040400000004040004000404000000,
				0x00020200000002020002000202000000,
				0x00010100000001010001000101000000,
				0x80000080000080808000800000800000,
				0x40000040000040404000400000400000,
				0x20000020000020202000200000200000,
				0x10000010000010101000100000100000,
				0x08000008000008080800080000080000,
				0x04000004000004040400040000040000,
				0x02000002000002020200020000020000,
				0x01000001000001010100010000010000,
				0x80000080808000000080008000008000,
				0x40000040404000000040004000004000,
				0x20000020202000000020002000002000,
				0x10000010101000000010001000001000,
				0x08000008080800000008000800000800,
				0x04000004040400000004000400000400,
				0x02000002020200000002000200000200,
				0x01000001010100000001000100000100,
				0x00808000808000008000800000000080,
				0x00404000404000004000400000000040,
				0x00202000202000002000200000000020,
				0x00101000101000001000100000000010,
				0x00080800080800000800080000000008,
				0x00040400040400000400040000000004,
				0x00020200020200000200020000000002,
				0x00010100010100000100010000000001
	};
	return m;
}

#elif CHOICE == 49
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0888,
				0x0444,
				0x0222,
				0x0111,
				0x8088,
				0x4044,
				0x2022,
				0x1011,
				0x8808,
				0x4404,
				0x2202,
				0x1101,
				0x8880,
				0x4440,
				0x2220,
				0x1110
	};
	return m;
}

#elif CHOICE == 50
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0888,
				0x4044,
				0x2202,
				0x1110,
				0x8880,
				0x0444,
				0x2022,
				0x1101,
				0x8808,
				0x4440,
				0x0222,
				0x1011,
				0x8088,
				0x4404,
				0x2220,
				0x0111
	};
	return m;
}

#elif CHOICE == 51
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8880,
				0x0444,
				0x2022,
				0x1101,
				0x8808,
				0x4440,
				0x0222,
				0x1011,
				0x8088,
				0x4404,
				0x2220,
				0x0111,
				0x0888,
				0x4044,
				0x2202,
				0x1110
	};
	return m;
}

#elif CHOICE == 52
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0888,
				0x0444,
				0x0222,
				0x0111,
				0x8088,
				0x4044,
				0x2022,
				0x1011,
				0x8808,
				0x4404,
				0x2202,
				0x1101,
				0x8880,
				0x4440,
				0x2220,
				0x1110
	};
	return m;
}

#elif CHOICE == 53
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0xc010,
				0x6008,
				0x3004,
				0x1802,
				0x0c01,
				0x0680,
				0x0340,
				0x8120,
				0x8018,
				0x400c,
				0x2006,
				0x1003,
				0x0881,
				0x04c0,
				0x0260,
				0x0130
	};
	return m;
}

#elif CHOICE == 54
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0c01,
				0x0680,
				0x0340,
				0x8120,
				0xc010,
				0x6008,
				0x3004,
				0x1802,
				0x0881,
				0x04c0,
				0x0260,
				0x0130,
				0x8018,
				0x400c,
				0x2006,
				0x1003
	};
	return m;
}

#elif CHOICE == 55
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8808,
				0x4404,
				0x2202,
				0x1101,
				0x8880,
				0x4440,
				0x2220,
				0x1110,
				0x0888,
				0x0444,
				0x0222,
				0x0111,
				0x8088,
				0x4044,
				0x2022,
				0x1011
	};
	return m;
}

#elif CHOICE == 56
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x0121,
				0x0818,
				0x0484,
				0x0242,
				0x1012,
				0x8081,
				0x4048,
				0x2024,
				0x2101,
				0x1808,
				0x8404,
				0x4202,
				0x1210,
				0x8180,
				0x4840,
				0x2420
	};
	return m;
}

#elif CHOICE == 57
vector<ROW> get_matrix()
{
	vector<ROW> m{
				0x8088,
				0x4044,
				0x2022,
				0x1011,
				0x8000,
				0x4000,
				0x2000,
				0x1000,
				0x0880,
				0x0440,
				0x0220,
				0x0110,
				0x8080,
				0x4040,
				0x2020,
				0x1010
	};
	return m;
}
#elif CHOICE == 59
vector<ROW> get_matrix()
{
	vector<ROW> m{
			0x78579153,
			0x9c999cf3,
			0x6e9691a3,
			0x4cbb5edb,
			0x38b1078f,
			0x63fce4cc,
			0x02e85ae8,
			0x32d525af,
			0x8aadcdbd,
			0x67b0ff00,
			0x568c0e30,
			0x4fb8cd60,
			0xf0881170,
			0xaaec9d05,
			0xae6cdb20,
			0x2ab4575a,
			0x026d0d93,
			0x5b091c9a,
			0x0f250a3d,
			0x648e0e76,
			0xde409e00,
			0x2e970ea5,
			0x0db74b7b,
			0xa4ab57bb,
			0xf56027e0,
			0xbaf5550d,
			0x77c8108e,
			0x5b8db0a5,
			0x98b60be5,
			0xe8a70a9b,
			0xa5a94a37,
			0xd4841291
	};
	return m;
}
#else
vector<ROW> get_matrix()
{   //skinny64 sa CHOICE == 57
	vector<ROW> m{
				0x8088,
				0x4044,
				0x2022,
				0x1011,
				0x8000,
				0x4000,
				0x2000,
				0x1000,
				0x0880,
				0x0440,
				0x0220,
				0x0110,
				0x8080,
				0x4040,
				0x2020,
				0x1010
	};
	return m;
}
#endif